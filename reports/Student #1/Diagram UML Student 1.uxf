<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="15.1">
  <help_text>// Uncomment the following line to change the fontsize and font:
// fontsize=14
// fontfamily=SansSerif //possible: SansSerif,Serif,Monospaced


//////////////////////////////////////////////////////////////////////////////////////////////
// Welcome to UMLet!
//
// Double-click on elements to add them to the diagram, or to copy them
// Edit elements by modifying the text in this panel
// Hold Ctrl to select multiple elements
// Use Ctrl+mouse to select via lasso
//
// Use +/- or Ctrl+mouse wheel to zoom
// Drag a whole relation at its central square icon
//
// Press Ctrl+C to copy the whole diagram to the system clipboard (then just paste it to, eg, Word)
// Edit the files in the "palettes" directory to create your own element palettes
//
// Select "Custom Elements &gt; New..." to create new element types
//////////////////////////////////////////////////////////////////////////////////////////////

// CREADO POR MANUEL NUÑO GARCÍA
// This text will be stored with each diagram;  use it for notes.</help_text>
  <zoom_level>6</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>366</x>
      <y>108</y>
      <w>282</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>&lt;&lt;Entity&gt;&gt;
Flight
--
+ highlights: String {Mandatory,ValidShortText, Automapped}
+ selfTransfer: Boolean {Mandatory, Automapped}
+ cost: Money {Mandatory, ValidMoney(min = 0, max = 1000000), Automapped}
+ description: String {Optional, ValidLongText, Automapped}
--
+ getDeparture(): Date
+ getArrival(): Date
+ getOrigin(): String
+ getDestination(): String
+ getLayovers(): Integer


bg=GREEN</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>330</x>
      <y>360</y>
      <w>366</w>
      <h>96</h>
    </coordinates>
    <panel_attributes>&lt;&lt;Entity&gt;&gt;
Leg {ValidLegs}
--
+ IATAcode: String {Mandatory, ValidString(pattern = "^[A-Z]{3}\\d{4}$"), Column(unique = true)}
+ departure: Date {Mandatory, ValidMoment(past = false), Temporal(TemporalType.TIMESTAMP)}
+ arrival: Date {Mandatory, ValidMoment(past = false), Temporal(TemporalType.TIMESTAMP)}
+ status: LegsStatus {Mandatory, Valid, Automapped}
--
+ getDuration(): Double
bg=GREEN</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>588</x>
      <y>288</y>
      <w>102</w>
      <h>66</h>
    </coordinates>
    <panel_attributes>&lt;&lt;Enum&gt;&gt;
LegsStatus
--
ON_TIME
DELAYED
CANCELLED
LANDED
bg=YELLOW</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>504</x>
      <y>222</y>
      <w>24</w>
      <h>150</h>
    </coordinates>
    <panel_attributes>lt=&lt;-x
m1=1
m2=*

</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;230.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>792</x>
      <y>414</y>
      <w>114</w>
      <h>48</h>
    </coordinates>
    <panel_attributes>&lt;&lt;Entity&gt;&gt;
Airport
bg=GREEN</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>690</x>
      <y>438</y>
      <w>114</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=x-&gt;
m1=*
m2=1
departure
</panel_attributes>
    <additional_attributes>10.0;20.0;170.0;20.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>792</x>
      <y>240</y>
      <w>114</w>
      <h>48</h>
    </coordinates>
    <panel_attributes>&lt;&lt;Entity&gt;&gt;
Airline
bg=GREEN</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>672</x>
      <y>108</y>
      <w>384</w>
      <h>66</h>
    </coordinates>
    <panel_attributes>&lt;&lt;Role&gt;&gt;
Manager {ValidManager}
--
+ identifier: String {Mandatory, ValidString(pattern = "^[A-Z]{2,3}\d{6}$"), Column(unique = true)}
+ experience: Integer {Mandatory, ValidNumber(max=65), Automapped}
+ picture: String {Optional, ValidUrl, Automapped}
+ dateOfBirth: Date {Mandatory, ValidMoment(past = true), Temporal(TemporalType.TIMESTAMP)}
bg=PINK</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>846</x>
      <y>168</y>
      <w>24</w>
      <h>84</h>
    </coordinates>
    <panel_attributes>lt=&lt;-x
m1=1
m2=*</panel_attributes>
    <additional_attributes>10.0;120.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>792</x>
      <y>348</y>
      <w>114</w>
      <h>48</h>
    </coordinates>
    <panel_attributes>&lt;&lt;Entity&gt;&gt;
Aircraft






bg=GREEN</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>522</x>
      <y>48</y>
      <w>432</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>lt=&lt;-x
m1=1
m2=*</panel_attributes>
    <additional_attributes>690.0;100.0;690.0;10.0;10.0;10.0;10.0;100.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>690</x>
      <y>408</y>
      <w>114</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=x-&gt;
m1=*
m2=1
arrival</panel_attributes>
    <additional_attributes>10.0;20.0;170.0;20.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>690</x>
      <y>372</y>
      <w>114</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=x-&gt;
m1=*
m2=1
</panel_attributes>
    <additional_attributes>10.0;20.0;170.0;20.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>930</x>
      <y>228</y>
      <w>192</w>
      <h>156</h>
    </coordinates>
    <panel_attributes>&lt;&lt;Form&gt;&gt;
ManagerDashboard
--
						
+ rankingExperience: Double
+ yearsToRetire: Integer
+ ratioOnTimeLegs: Double
+ ratioDelayedLegs: Double
+ mostPopularAirport: Airport
+ lessPopularAirport: Airport
+ numberOfLegs: Map&lt;LegsStatus, Integer&gt;
+ averageCostFlights: Money
+ minimumCostFlights: Money
+ maximumCostFlights: Money
+ standardDeviationCostFlights: Money
bg=CYAN</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>102</x>
      <y>456</y>
      <w>180</w>
      <h>150</h>
    </coordinates>
    <panel_attributes>Function: Retrieves the duration of the 
flight in hours.

How it works: The function calculates the 
flight duration by first converting the 
departure and arrival dates to Instant 
objects (using this.getDeparture().toInstant() 
and this.getArrival().toInstant()). Then, it 
calculates the duration between the two 
Instant objects using Duration.between(). 
The duration is obtained in minutes, and then 
it is converted to hours by dividing the result 
by 60.0. The calculated duration is returned 
as a Double.
bg=blue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>276</x>
      <y>0</y>
      <w>162</w>
      <h>102</h>
    </coordinates>
    <panel_attributes>Function: Retrieves the departure date
of a flight.

How it works: It gets an instance of 
LegRepository via SpringHelper.getBean,
then uses the findDepartureByFlightId 
method to query the departure date 
based on the flight ID (obtained 
using this.getId()).
bg=blue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>102</x>
      <y>0</y>
      <w>162</w>
      <h>102</h>
    </coordinates>
    <panel_attributes>Function: Retrieves the arrival date of a 
flight.

How it works: Similar to getDeparture(), 
it gets an instance of LegRepository and 
uses the findArrivalByFlightId method to 
query the arrival date based on the 
flight ID.
bg=blue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>102</x>
      <y>114</y>
      <w>162</w>
      <h>102</h>
    </coordinates>
    <panel_attributes>Function: Retrieves the origin city of the 
flight.

How it works: It calls 
findOriginCityByFlightId to get the origin 
city and then accesses the first element 
of the result list (using .get(0)).
bg=blue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>102</x>
      <y>228</y>
      <w>162</w>
      <h>108</h>
    </coordinates>
    <panel_attributes>Function: Retrieves the destination city 
of the flight.

How it works: Similar to getOrigin(), it 
uses findDestinationCityByFlightId to get 
the destination city, but this time it 
accesses the last element of the list 
(using .get(-1), which could cause an 
error if the list is empty, as negative 
indexing is not valid in Java).
bg=blue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>102</x>
      <y>348</y>
      <w>162</w>
      <h>96</h>
    </coordinates>
    <panel_attributes>Function: Retrieves the number of 
layovers for the flight.

How it works: It uses the 
numberOfLayours method from the 
LegRepository to get the number of 
layovers for the flight based on its ID.
bg=blue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>276</x>
      <y>450</y>
      <w>126</w>
      <h>48</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>190.0;10.0;190.0;50.0;10.0;60.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>258</x>
      <y>216</y>
      <w>120</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>180.0;10.0;180.0;180.0;100.0;180.0;100.0;280.0;10.0;280.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>258</x>
      <y>204</y>
      <w>120</w>
      <h>66</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>180.0;10.0;80.0;10.0;80.0;90.0;10.0;90.0</additional_attributes>
  </element>
</diagram>
